//users
/**
 * @swagger
 * /api/users/register:
 *   post:
 *     summary: Register a new user.
 *     description: Register a new user with the provided credentials.
 *     tags:
 *       - Users
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UserRegistration'
 *     responses:
 *       201:
 *         description: User registered successfully.
 *       400:
 *         description: Invalid user registration data.
 */

/**
 * @swagger
 * /api/users/login:
 *   post:
 *     summary: Log in a user.
 *     description: Log in a user using their credentials.
 *     tags:
 *       - Users
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UserLogin'
 *     responses:
 *       200:
 *         description: User logged in successfully.
 *       401:
 *         description: Invalid username or password.
 */

/**
 * @swagger
 * /api/users/profile:
 *   get:
 *     summary: Get user profile.
 *     description: Retrieve the profile of the authenticated user.
 *     tags:
 *       - Users
 *     security:
 *       - BearerAuth: []
 *     responses:
 *       200:
 *         description: User profile retrieved successfully.
 *       401:
 *         description: Unauthorized. Token missing or invalid.
 */

/**
 * @swagger
 * /api/users/{email}:
 *   get:
 *     summary: Get user by email.
 *     description: Retrieve user information by email.
 *     tags:
 *       - Users
 *     parameters:
 *       - name: email
 *         in: path
 *         required: true
 *         description: The email of the user to retrieve.
 *     responses:
 *       200:
 *         description: User information retrieved successfully.
 *       404:
 *         description: User not found.
 */

/**
 * @swagger
 * /api/users:
 *   get:
 *     summary: Get a list of all users.
 *     description: Retrieve a list of all users.
 *     tags:
 *       - Users
 *     responses:
 *       200:
 *         description: A list of users.
 */

/**
 * @swagger
 * /api/users/{id}:
 *   get:
 *     summary: Get user by ID.
 *     description: Retrieve user information by user ID.
 *     tags:
 *       - Users
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The ID of the user to retrieve.
 *     responses:
 *       200:
 *         description: User information retrieved successfully.
 *       404:
 *         description: User not found.
 */

/**
 * @swagger
 * /api/users:
 *   post:
 *     summary: Create a new user.
 *     description: Create a new user with the provided details.
 *     tags:
 *       - Users
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UserRegistration'
 *     responses:
 *       201:
 *         description: User created successfully.
 *       400:
 *         description: Invalid user registration data.
 */

/**
 * @swagger
 * /api/users/{id}:
 *   put:
 *     summary: Update user information.
 *     description: Update user information by ID.
 *     tags:
 *       - Users
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The ID of the user to update.
 *     requestBody:
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/UserUpdate'
 *     responses:
 *       200:
 *         description: User information updated successfully.
 *       404:
 *         description: User not found.
 */

/**
 * @swagger
 * /api/users/{id}:
 *   delete:
 *     summary: Delete a user.
 *     description: Delete a user by ID.
 *     tags:
 *       - Users
 *     parameters:
 *       - name: id
 *         in: path
 *         required: true
 *         description: The ID of the user to delete.
 *     responses:
 *       200:
 *         description: User deleted successfully.
 *       404:
 *         description: User not found.
 */

// Definition for User Registration
/**
 * @swagger
 * components:
 *   schemas:
 *     UserRegistration:
 *       type: object
 *       properties:
 *         firstName:
 *           type: string
 *         lastName:
 *           type: string
 *         email:
 *           type: string
 *         password:
 *           type: string
 *         role:
 *           type: string
 *         cart:
 *           type: string
 *         isGoogle:
 *           type: boolean
 *         premium:
 *           type: boolean
 */

// Definition for User Login
/**
 * @swagger
 * components:
 *   schemas:
 *     UserLogin:
 *       type: object
 *       properties:
 *         email:
 *           type: string
 *         password:
 *           type: string
 */

// Definition for User Update
/**
 * @swagger
 * components:
 *   schemas:
 *     UserUpdate:
 *       type: object
 *       properties:
 *         firstName:
 *           type: string
 *         lastName:
 *           type: string
 *         email:
 *           type: string
 *         password:
 *           type: string
 *         role:
 *           type: string
 *         cart:
 *           type: string
 *         isGoogle:
 *           type: boolean
 *         premium:
 *           type: boolean
 */

//products

